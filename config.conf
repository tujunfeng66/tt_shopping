user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;
events {
    worker_connections  1024;
}
http {
include       /etc/nginx/mime.types;
default_type  application/octet-stream;

log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

access_log  /var/log/nginx/access.log  main;

sendfile        on;
#tcp_nopush     on;

keepalive_timeout  65;

#gzip  on;
# 如果创建多个uwsgi，就重新创建一个uwsgi2.ini并启动
# upstream 自定义名字 {
    server 127.0.0.1:8080；
    server 127.0.0.1:8081；
}
server {
listen       80;
server_name  localhost;


location / {
    include /etc/nginx/uwsgi_params;  # 使用uswgi服务器
    uwsgi_pass 127.0.0.1:8080;    #交给uwsgi处理 把浏览器发来的请求转发到8080端口（必须与uwsgi.ini文件里的socket端口一致）实现了
    # 如果设置了upstream上面一行就改写
    # uwsgi_pass 自定义名字
}

location /static { # 处理静态文件，处理链接是以/static开头的请求
# 项目静态文件的路径。即：告诉nginx应该去哪里找静态文件
    alias /home/pyvip/01/dailyfresh/static/;
                }
location = / {
# 传递请求给静态服务器的nginx
proxy_pass http:// 虚拟机地址ip:80
}

        }

}
# sudo nginx  -c /home/pyvip/01/dailyfresh/config.conf 启动项目目录下的config.conf文件